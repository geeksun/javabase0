23个基本模式: 
分为创建(build)模式、结构(configuration)模式和行为(behavior)模式.
常用的有：
单例(singleton): 一个类仅有一个实例，并提供一个访问它的全局访问点。这是为了解决多线程下, 有可能引发资源访问冲突的问题.
例如：数据库连接池管理者
抽象工厂（abstrace factory）:提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。
适配器(Adapter)：将一个类的接口转换成调用方希望的另外一个接口，从而解决两个已有接口之间不兼容的问题。
使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
代理模式(Proxy)：可以给一个对象提供一个代理对象，并由代理对象控制对原对象的引用。
在一些情况下，一个客户不想或者不能够直接引用一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。
桥梁模式(Bridge): 在两个互相不可到达的对象之间，搭起一座起到联通作用的桥梁。这两个不可到达的对象就是抽象与实现。而桥梁模式的真正目的
是将抽象与实现分离。
在面向对象设计中有两条重要原则 :
1.找出变化并封装之
2.优先使用聚合而不是继承
这两条将在桥梁模式中得到完美体现 --> 使用桥梁模式的应用就是java AWT框架.在不同系统下开发的软件界面都带有不同系统独有的风格。
        
GOF在《设计模式》中给桥梁模式的定义为：将抽象部分与它的实现部分分离，使它们都可以独立地变化。
这里的抽象部分和实现部分不是我们通常认为的父类与子类、接口与实现类的关系，而是组合关系。也就是说，实现部分是被抽象部分调用，
以用来完成（实现）抽象部分的功能。


