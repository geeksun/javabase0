数据结构:数据在计算机存储空间的(或磁盘中)的安排方式.
data strutctures:或者说是对在计算机内存中或磁盘中的数据的一种安排.
包括数组\链表\栈\队列\二叉树\哈希表等.
arithmetic:算法对这些结构里的数据进行各种处理,例如,查找一条特殊的数据或对数据进行排序;
(algorithms)算法:软件程序用来操作这些结构中的数据的过程.

data strutcture 数据结构的特性characteristic:
数据结构		优点										缺点
数组			插入快,如果知道下标,可以非常快地存取			查找慢,删除慢,大小固定
有序数组 		比无序的数组查找快					插入和删除慢,大小固定
栈			先进后出的方式存取(FILO)				存取其它项慢
队列			先进先出存取(FIFO)					存取其它项慢
链表			插入快,删除快						查找慢
二叉树		查找\插入\删除都快(树保持平衡的情况下)			删除算法复杂
红-黑树		查找\插入\删除都快.树总是平衡的				算法复杂
2-3-4树		查找\插入\删除都快.树总是平衡的.			算法复杂
哈希表		如果关健字已知则存取极快.插入快				删除慢,如果不知道关健字则存取很慢,对存储空间使用不充分
堆			插入\删除快,对最大数据项的存取很快			对其他数据项存取慢
图			对现实世界建模						有些算法慢且复杂

大多数的数据结构需要知道,如何:
查找\插入\删除一数据项

JAVA中没有显式的指针,指针以存储地址的形式埋藏在程序的深处.
JAVA中使用的是"引用",reference来代替"指针";基本数据类型的变量里存放的数据的数值,而
例:
User user;
user 存储的是对象的内存地址,而对象实际上存储在内存的的其他地方;user只是对象的一个引用,而不是对象本身;

小结:
数据结构是指数据在计算机内存空间中或磁盘中的组织形式.
正确选择数据结构会使程序的效率大大提高.
二分查找法比线性查找法快得多，但只应用于有序的数据.
数据结构中除数组外都可以认为是抽象数据结构(ADT).
linkedList(链表)继数组后使用得最广泛的通用存储结构.
除非需要频繁通过下标随机访问各个数据,否则在很多使用数组的地方都可以用链表来代替.
双端链表比普通链表多了一个对最后一个链结点的引用.
有序链表在对最小值进行频繁地操作使用是个有效的方案,因为它总在表头.
双向链表不必是双端链表,但双端链表是有用的(保持对最后一个元素的引用)
迭代器是一个引用,它被封装在类对象中,这个引用指向相关联的链表中的链结点.允许使用者沿链表移动迭代器,并访问当前指示的链结点.
可以用迭代器遍历链表,在选定的链结点上执行某些操作.

冒泡排序算法的不变性是 out 右边的所有数据为有序.(第一趟排序时,out在数据的最右边,因为尚未排序),效率最差,也最简单.
选择排序：每一趟排序从未排序序列中挑选一个值最小的元素，然后将其放在已排序序列的右端。
选择排序算法的不变性是下标小于 out 的位置的数据项总是有序的.
插入排序：从未排序序列中依次取出元素与已排序序列中的的元素进行比较，并将其放在已排序序列中的合适位置。
插入排序算法的不变性是将 temp 位置的项插入以后,比 out 变量下标小的数据项都是局部有序的.
冒泡排序有序的数都排列在右边，选择排序中有序的数都排列在左边。
选择排序比冒泡排序的交换次数少.比较次数和冒泡排序是一样的.
对于数据量较小或者基本上有序的数据来说,插入排序要好得多.
插入排序的效率是基本的排序的最好的.比冒泡排序算法快一倍,比选择排序略快.
冒泡排序,选择排序,插入排序都是稳定的算法.(排序考虑到了数据项有相同关健字的情况,经过排序它们的顺序保持不变,这样的排序就是稳定的)
衡量排序算法的标准:速度和占用的内存空间

OrdArray.java 有序数组的 find() 使用了 二分查找法

二叉搜索树：一个节点的左子节点的关健字值小于这个节点，右子节点的关健字值大于或等于这个父节点。
二叉树：树中的每个节点最多有两个子节点；节点的两个节点称为"左子节点"和"右子节点";节点不是必须有两个子结点,可以有一个子结点或一个都没有.
二叉树有的是不平衡的,这是由于数据插入的不平衡造成的.

栈、队列和优先级队列是经常用来简化某些程序操作的数据结构。
在这些数据结构中,只有一个数据项可以被访问.
栈中重要的操作是在栈顶插入(压入)一个数据项,以及从栈顶移除(弹出)一个数据项.
队列只允许访问第一个插入的数据项.
队列的重要操作是在队尾插入数据项和在队头移除数据项.
队列可以实现为循环队列,它基于数组,数组下标可以从数组末端回绕到数组的开始位置.
优先级队列允许访问最小(有时为最大)的数据项
优先级队列的重要操作是有序地插入新数据项和移除关健字最小的数据项.
链表也常用来实现队列
优先级队列是专用的数据结构,在优先级队列中,数据项按关健字的值排序.通常通过堆来实现.优先级队列的插入慢(用数组实现的).

递归的效率并不高,因为在调用方法会有一定的开销,基于循环的方法效率更高.采用递归是因为它从概念上简化了问题.
归并排序的缺点是占用内存大.归并算法的核心是归并两个已经有序的数组，把两个已经有序的数组归并成一个数组，且去掉里面的重复数。
递归和栈之间有一种非常紧密的关系,大部分的编译器都是使用栈来实现递归的.
递归的方法可能效率低,可以用一个简单循环或者一个基于栈的方法来替代它.
任何可以用递归实现的操作都可以用一个栈来实现.

希尔排序:又称缩小增量排序法，基于插入排序,对于几千个数据项的中等数组排序表现良好.
希尔排序将增量应用到到插入排序,然后逐渐缩小增量.
枢纽是在划分的过程中确定数据项应该放在哪一组的值,小于枢纽的数据项都放在左边一组;大于枢纽的数据项都放在右边一组.
快速排序:又称划分排序法，本质上把一个数组分成两个数组,然后递归地调用自身为每一个子数组进行快速排序来实现，适于大量数据的排序,

堆是完全二叉树,常常用一个数组来实现,堆中的每一个节点都满足堆的条件,即每一个节点的关健字都大于或等于这个节点的子节点的关健字.
堆是完全二叉树的事实说明了表示堆的数组中没有"洞",主要用于实现优先级队列.
堆和搜索二叉树相比是弱序的.