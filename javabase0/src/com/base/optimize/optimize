在if - else后要用{} 将其闭合，否则可能导致不可查知的错误。
在switch 语句中，default case后要有break语句，以防止在其后加入新的 case 语句被多次调用。
死循环： for(;;)和while(true) 

GC:Garbage Collection,垃圾回收机制，是Java程序设计中内存管理的核心概念，Java虚拟机的内存管理机制被称为垃圾回收机制。
JVM环境中的垃圾：对象创建后被放置在堆内存中（heap），当永远不再引用这个对象时，它将被JVM在堆内存中回收。
JVM管理两种内存：
堆内存(heap)和栈内存(stack),
heap: 存储在运行时创建或实例化的对象与变量。
stack: 存储程序代码中声明为静态的（或非静态）的方法。

heap（堆内存）在虚拟机启动的时候被创建，堆内存中所存储的对象可以被JVM自动回收，不能通过外部手段回收。
垃圾回收同对象的生命周期紧紧联系在一起的。

创建对象规则：
创建对象时避免在循环体中创建对象，即使该对象占用内存空间不大。
尽量及时使对象符合垃圾回收标准。
不要采用过深的继承层次。
访问本地变量优于访问类中的变量。
不要对一个对象初始化多次。

1.  强引用 (Strong Reference)，这是使用最普遍的引用。如果一个对象具有强引用，那就类似于必不可少的生活用品，垃圾回收器绝不会回收它。
当内存空间不足，
Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足问题。 

2.  软引用（SoftReference）
    如果一个对象只具有软引用，那就类似于可有可物的生活用品。如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，
    就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。
软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收，Java 虚拟机就会把这个软引用加入到与之关联的
引用队列中。

3．弱引用（WeakReference）
    如果一个对象只具有弱引用，那就类似于可有可物的生活用品。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。
    在垃圾回收器线程扫描它 所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，
    由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。 
弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的
引用队列中。

4．虚引用（PhantomReference）
    "虚引用"顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任
    何引用一样，在任何时候都可能被垃圾回收。
虚引用主要用来跟踪对象被垃圾回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列（ReferenceQueue）联合使用。当垃
圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。程序可以通过判断
引用队列中是 否已经加入了虚引用，来了解
  被引用的对象是否将要被垃圾回收。程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。

系统调用是比较浪费资源的，系统开销较大，影响应用性能。如： File.length().

尽量避免在构造器中对静态变量做赋值操作:
因为类中的静态变量仅保留一份拷贝，无论在应用中创建了多少这个类的实例对象，这些对象都要共享该类中的同一个静态变量的拷贝。
所以，对静态变量赋值一次即可.

